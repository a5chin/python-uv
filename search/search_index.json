{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to python-uv","text":""},{"location":"#what-is-python-uv","title":"What is python-uv?","text":"<p>This repository contains configurations to set up a Python development environment using VSCode's Dev Container feature. The environment includes uv and Ruff.</p> <p></p>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>.\n\u251c\u2500\u2500 .devcontainer/\n\u2502   \u251c\u2500\u2500 devcontainer.json\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 .github/\n\u2502   \u251c\u2500\u2500 actions/\n\u2502   \u2502   \u251c\u2500\u2500 setup-git-config\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 action.yml\n\u2502   \u2502   \u2514\u2500\u2500 setup-python-with-uv\n\u2502   \u2502       \u2514\u2500\u2500 action.yml\n\u2502   \u251c\u2500\u2500 workflows/\n\u2502   \u2502   \u251c\u2500\u2500 docker.yml\n\u2502   \u2502   \u251c\u2500\u2500 pyright.yml\n\u2502   \u2502   \u251c\u2500\u2500 ruff.yml\n\u2502   \u2502   \u2514\u2500\u2500 test.yml\n\u2502   \u2514\u2500\u2500 dependabot.yml\n\u251c\u2500\u2500 .vscode\n\u2502   \u251c\u2500\u2500 extensions.json\n\u2502   \u2514\u2500\u2500 settings.json\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 tools/\n\u2502        \u251c\u2500\u2500 test__config.py\n\u2502        \u251c\u2500\u2500 test__logger.py\n\u2502        \u2514\u2500\u2500 test__tracer.py\n\u251c\u2500\u2500 tools/\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502    \u251c\u2500\u2500 __init__.py\n\u2502   \u2502    \u251c\u2500\u2500 fastapi.py\n\u2502   \u2502    \u2514\u2500\u2500 settings.py\n\u2502   \u251c\u2500\u2500 logger/\n\u2502   \u2502    \u251c\u2500\u2500 __init__.py\n\u2502   \u2502    \u251c\u2500\u2500 color.py\n\u2502   \u2502    \u251c\u2500\u2500 googlecloud.py\n\u2502   \u2502    \u251c\u2500\u2500 local.py\n\u2502   \u2502    \u251c\u2500\u2500 logger.py\n\u2502   \u2502    \u251c\u2500\u2500 style.py\n\u2502   \u2502    \u2514\u2500\u2500 type.py\n\u2502   \u251c\u2500\u2500 tracer/\n\u2502   \u2502    \u251c\u2500\u2500 __init__.py\n\u2502   \u2502    \u2514\u2500\u2500 timer.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 .dockerignore\n\u251c\u2500\u2500 .env.local\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .pre-commit-config.yaml\n\u251c\u2500\u2500 .python-version\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 pyrightconfig.json\n\u251c\u2500\u2500 pytest.ini\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 ruff.toml\n\u2514\u2500\u2500 uv.lock\n</code></pre>"},{"location":"about/","title":"About","text":"<ul> <li>LICENSE</li> </ul>"},{"location":"about/license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2024 a5chin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"configurations/","title":"Configurations","text":"<p>Tips</p> <p>Looking for a getting started guide? Check out the Gettting Started guide first.</p> <p>Configurations for using Python with uv on Dev Container. Learn more about using this repository:</p> <ul> <li>Understanding uv Configure</li> <li>Understanding Ruff Configure</li> <li>Understanding pre-commit Configure</li> <li>Understanding Pyright Configure</li> <li>Understanding Test Configure</li> </ul>"},{"location":"configurations/pre-commit/","title":"pre-commit Configurations","text":"<p>Tip</p> <p>If you do not want to use the pre-commit hook, run this command: <pre><code>pre-commit uninstall\n</code></pre></p>"},{"location":"configurations/pre-commit/#hook-list","title":"Hook List","text":"<ul> <li>https://github.com/astral-sh/ruff-pre-commit<ul> <li>Ruff Lint</li> <li>Ruff Format</li> </ul> </li> <li>https://github.com/hadolint/hadolint<ul> <li>Hadolint</li> </ul> </li> </ul>"},{"location":"configurations/pre-commit/#overview","title":"Overview","text":".pre-commit-config.yaml<pre><code>default_stages: [pre-commit]\n\nrepos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.3\n    hooks:\n      - id: ruff\n        name: Ruff check\n        description: \"Run 'ruff check' for extremely fast Python linting\"\n        args: [--fix]\n\n      - id: ruff-format\n        name: Ruff format\n        description: \"Run 'ruff format' for extremely fast Python formatting\"\n\n  - repo: https://github.com/hadolint/hadolint\n    rev: v2.12.0\n    hooks:\n      - id: hadolint\n        name: Lint Dockerfiles\n        description: Runs hadolint to lint Dockerfiles\n        language: system\n        types: [\"dockerfile\"]\n        entry: hadolint\n\nci:\n  autoupdate_schedule: weekly\n</code></pre>"},{"location":"configurations/pyright/","title":"Pyright Configurations","text":"<p>Tip</p> <p>Official documentation for Pyright is available at https://microsoft.github.io/pyright</p> <p>Danger</p> <p>If you want to create new directories in the root directory, you must add them to the <code>include</code> list in the <code>pyrightconfig.json</code> file.</p> pyrightconfig.json<pre><code>{\n    \"pythonVersion\": \"3.14\",\n    \"pythonPlatform\": \"All\",\n    \"venv\": \".venv\",\n    \"typeCheckingMode\": \"standard\",\n    \"include\": [\n        \"tools\"\n    ],\n    \"exclude\": [\n        \"**/__pycache__\",\n        \".pytest_cache\",\n        \".ruff_cache\",\n        \".venv\"\n    ],\n}\n</code></pre>"},{"location":"configurations/ruff/","title":"Ruff Configurations","text":"<p>Tip</p> <p>Official documentation for Ruff is available at https://docs.astral.sh/ruff</p> <p>The Ruff formatter is an extremely fast Python code formatter designed as a drop-in replacement for Black, available as part of the ruff CLI via ruff format.</p> <p> Linting the CPython codebase from scratch. </p>"},{"location":"configurations/ruff/#rufftoml","title":"ruff.toml","text":"<p>Warning</p> <p>Note that when using ruff as a formatter, it is officially recommended to avoid the following lint rule, which is not the default in ruff. They are set as default in this repository.</p> ruff.tomlpyproject.toml <pre><code># Exclude a variety of commonly ignored directories.\nexclude = [\n    \".bzr\",\n    \".direnv\",\n    \".eggs\",\n    \".git\",\n    \".git-rewrite\",\n    \".hg\",\n    \".ipynb_checkpoints\",\n    \".mypy_cache\",\n    \".nox\",\n    \".pants.d\",\n    \".pyenv\",\n    \".pytest_cache\",\n    \".pytype\",\n    \".ruff_cache\",\n    \".svn\",\n    \".tox\",\n    \".venv\",\n    \".vscode\",\n    \"__pypackages__\",\n    \"_build\",\n    \"buck-out\",\n    \"build\",\n    \"dist\",\n    \"node_modules\",\n    \"site-packages\",\n    \"venv\",\n]\n\n# Same as Black.\nline-length = 88\nindent-width = 4\n\n# Assume Python 3.14\ntarget-version = \"py314\"\n\n[lint]\n# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.\nselect = [\"ALL\"]\nignore = [\n    \"COM812\",\n    \"COM819\",\n    \"D100\",\n    \"D203\",\n    \"D213\",\n    \"D300\",\n    \"E111\",\n    \"E114\",\n    \"E117\",\n    \"ISC001\",\n    \"ISC002\",\n    \"Q000\",\n    \"Q001\",\n    \"Q002\",\n    \"Q003\",\n    \"W191\",\n]\n\n# Allow fix for all enabled rules (when `--fix`) is provided.\nfixable = [\"ALL\"]\nunfixable = []\n\n# Allow unused variables when underscore-prefixed.\ndummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"\n\n[format]\n# Like Black, use double quotes for strings.\nquote-style = \"double\"\n\n# Like Black, indent with spaces, rather than tabs.\nindent-style = \"space\"\n\n# Like Black, respect magic trailing commas.\nskip-magic-trailing-comma = false\n\n# Like Black, automatically detect the appropriate line ending.\nline-ending = \"auto\"\n</code></pre> <pre><code>[tool.ruff]\n# Exclude a variety of commonly ignored directories.\nexclude = [\n    \".bzr\",\n    \".direnv\",\n    \".eggs\",\n    \".git\",\n    \".git-rewrite\",\n    \".hg\",\n    \".ipynb_checkpoints\",\n    \".mypy_cache\",\n    \".nox\",\n    \".pants.d\",\n    \".pyenv\",\n    \".pytest_cache\",\n    \".pytype\",\n    \".ruff_cache\",\n    \".svn\",\n    \".tox\",\n    \".venv\",\n    \".vscode\",\n    \"__pypackages__\",\n    \"_build\",\n    \"buck-out\",\n    \"build\",\n    \"dist\",\n    \"node_modules\",\n    \"site-packages\",\n    \"venv\",\n]\n\n# Same as Black.\nline-length = 88\nindent-width = 4\n\n# Assume Python 3.12\ntarget-version = \"py312\"\n\n[tool.ruff.lint]\n# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.\nselect = [\"ALL\"]\nignore = [\n    \"COM812\",\n    \"COM819\",\n    \"D100\",\n    \"D203\",\n    \"D213\",\n    \"D300\",\n    \"E111\",\n    \"E114\",\n    \"E117\",\n    \"ISC001\",\n    \"ISC002\",\n    \"Q000\",\n    \"Q001\",\n    \"Q002\",\n    \"Q003\",\n    \"W191\",\n]\n\n# Allow fix for all enabled rules (when `--fix`) is provided.\nfixable = [\"ALL\"]\nunfixable = []\n\n# Allow unused variables when underscore-prefixed.\ndummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"\n\n[tool.ruff.format]\n# Like Black, use double quotes for strings.\nquote-style = \"double\"\n\n# Like Black, indent with spaces, rather than tabs.\nindent-style = \"space\"\n\n# Like Black, respect magic trailing commas.\nskip-magic-trailing-comma = false\n\n# Like Black, automatically detect the appropriate line ending.\nline-ending = \"auto\"\n</code></pre>"},{"location":"configurations/ruff/#extensionsjson","title":"extensions.json","text":"<p>The following settings are required for automatic formatting on VSCode. .vscode/extensions.json<pre><code>{\n    \"python.defaultInterpreterPath\": \"/home/vscode/.venv/bin/python\",\n    \"[python]\": {\n        \"editor.codeActionsOnSave\": {\n            \"source.fixAll\": \"explicit\",\n            \"source.organizeImports\": \"explicit\"\n        },\n        \"editor.defaultFormatter\": \"charliermarsh.ruff\",\n        \"editor.formatOnSave\": true,\n        \"editor.tabSize\": 4\n    }\n}\n</code></pre></p>"},{"location":"configurations/test/","title":"Test Configurations","text":""},{"location":"configurations/test/#pytestini","title":"<code>pytest.ini</code>","text":"pytest.ini<pre><code>[pytest]\naddopts =\n    --cov=.\n    --cov-branch\n    --cov-fail-under=75\n    --cov-report=html\n    --cov-report=term-missing\n    --import-mode=importlib\n\nnorecursedirs =\n    .*\n    __pycache__\n    htmlcov\n\npythonpath = \".\"\npython_files = test__*.py\ntestpaths = tests\n</code></pre>"},{"location":"configurations/test/#options-details","title":"Options Details","text":""},{"location":"configurations/test/#addopts-option","title":"<code>addopts</code> option","text":"<ul> <li><code>--cov=.</code><ul> <li>Measure coverage for the current directory.</li> </ul> </li> <li><code>--cov-branch</code><ul> <li>Measure branch coverage.</li> </ul> </li> <li><code>--cov-fail-under=75</code><ul> <li>Fail if the coverage is less than 75%.</li> </ul> </li> <li><code>--cov-report=html</code><ul> <li>Generate an HTML report.</li> </ul> </li> <li><code>--cov-report=term-missing</code><ul> <li>Show missing lines in the terminal.</li> </ul> </li> <li><code>--import-mode=importlib</code><ul> <li>Use importlib to import modules. It is recommended</li> </ul> </li> </ul>"},{"location":"configurations/test/#norecursedirs-option","title":"<code>norecursedirs</code> option","text":"<p>Ignore directories or files that match the following patterns:</p> <ul> <li><code>.*</code></li> <li><code>__pycache__</code></li> <li><code>htmlcov</code></li> </ul>"},{"location":"configurations/test/#pythonpath-option","title":"<code>pythonpath</code> option","text":"<p>Path specified here will be added to <code>sys.path</code> before running the tests.</p>"},{"location":"configurations/test/#python_files-option","title":"<code>python_files</code> option","text":"<p>Only files that match the pattern <code>test__*.py</code> will be considered as test files. It is recommended  to reduce the number of files that pytest has to scan.</p>"},{"location":"configurations/test/#testpaths-option","title":"<code>testpaths</code> option","text":"<p>Only the <code>tests</code> directory will be considered for running the tests. It is recommended to reduce the number of directories that pytest has to scan.</p>"},{"location":"configurations/test/#settingsjson","title":"<code>settings.json</code>","text":".vscode/settings.json<pre><code>{\n    \"python.testing.autoTestDiscoverOnSaveEnabled\": false,\n    \"python.testing.pytestEnabled\": true,\n    \"python.testing.pytestArgs\": [\n        \"tests\"\n    ],\n    \"python.testing.unittestEnabled\": false,\n}\n</code></pre>"},{"location":"configurations/uv/","title":"uv Configations","text":"<p>Tip</p> <p>Official documentation for uv is available at https://docs.astral.sh/uv</p>"},{"location":"configurations/uv/#virtual-environment","title":"Virtual Environment","text":"<p>Set the <code>UV_PROJECT_ENVIRONMENT</code> not to create a virtual environment in the project directory.</p> .devcontainer/Dockerfile<pre><code>{\n    \"name\": \"uv\",\n    \"build\": {\n        \"context\": \"..\",\n        \"dockerfile\": \"Dockerfile\",\n        \"args\": {\n            \"UV_VERSION\": \"0.5.11\",\n            \"DEBIAN_VERSION\": \"bookworm\"\n        }\n    },\n    \"features\": {\n        \"ghcr.io/dhoeric/features/hadolint:1\": {}\n    },\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"charliermarsh.ruff\",\n                \"exiasr.hadolint\",\n                \"kevinrose.vsc-python-indent\",\n                \"mosapride.zenkaku\",\n                \"ms-azuretools.vscode-docker\",\n                \"ms-python.python\",\n                \"njpwerner.autodocstring\",\n                \"redhat.vscode-yaml\",\n                \"shardulm94.trailing-spaces\",\n                \"tamasfe.even-better-toml\"\n            ]\n        }\n    },\n    \"containerEnv\": {\n        \"DISPLAY\": \"dummy\",\n        \"PYTHONUNBUFFERED\": \"True\",\n        \"UV_LINK_MODE\": \"copy\",\n        \"UV_PROJECT_ENVIRONMENT\": \"/home/vscode/.venv\"\n    },\n    \"postCreateCommand\": \"uv sync --frozen\",\n    \"postStartCommand\": \"uv run pre-commit install\",\n    \"remoteUser\": \"vscode\"\n}\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>How to get started with this repository.</p> <ul> <li>Download Docker Desktop to your PC</li> <li>Download VS Code to Your PC</li> <li>Install Dev Container to VS Code</li> </ul>"},{"location":"getting-started/devcontainer/","title":"Dev Container","text":"<p>Install Dev Container, a VS Code extension, on VS Code. Type Cmd+Shift+X on VS Code to open Extensions on the side, then type <code>ms-vscode-remote.remote-containers</code> and install the extension that comes up.</p> <p></p> <p>Dev Container features on VS Code</p>"},{"location":"getting-started/docker/","title":"Docker","text":"<p>Install Docker from the official Docker website.</p> <p>Warning</p> <p>Publishing container ports is insecure by default. Meaning, when you publish a container\u2019s ports it becomes available not only to the Docker host, but to the outside world as well.</p> <p>If you include the localhost IP address (127.0.0.1) with the publish flag, only the Docker host can access the published container port.</p> <pre><code>{\n    \"builder\": {\n        \"gc\": {\n        \"defaultKeepStorage\": \"20GB\",\n        \"enabled\": true\n        }\n    },\n    \"experimental\": false,\n    \"features\": {\n        \"buildkit\": true\n    },\n    \"ip\": \"127.0.0.1\"\n}\n</code></pre> <p></p> <p>Docker App on Mac</p>"},{"location":"getting-started/vscode/","title":"VS Code","text":"<p>Install VS Code from the official VS Code website.</p>"},{"location":"guides/","title":"Guides","text":"<p>How to use this repository.</p> <ul> <li>How to use uv</li> <li>How to use Ruff</li> <li>How to use Pyright</li> <li>How to use pre-commit</li> <li>How to use Test</li> <li>How to use cookiecutter</li> <li>How to use Tools<ul> <li>How to use config in this repository</li> <li>How to use logger in this repository</li> <li>How to use tracer in this repository</li> </ul> </li> </ul>"},{"location":"guides/cookiecutter/","title":"cookiecutter User Guides on this repository","text":"<p>Tip</p> <p>Official documentation for cookiecutter is available at https://cookiecutter.readthedocs.io/en/stable/</p> <p>Note</p> <p>If you do not want to use the To use cookiecutter for template, use the following command: <pre><code>uv run cookiecutter {url}\n</code></pre></p>"},{"location":"guides/cookiecutter/#example-urls","title":"Example URLs","text":"<ul> <li>Data Science<ul> <li>https://github.com/drivendataorg/cookiecutter-data-science</li> </ul> </li> <li>Django<ul> <li>https://github.com/cookiecutter/cookiecutter-django</li> <li>https://github.com/agconti/cookiecutter-django-rest</li> <li>https://github.com/vchaptsev/cookiecutter-django-vue</li> <li>https://github.com/chrisdev/wagtail-cookiecutter-foundation</li> <li>https://github.com/wemake-services/wemake-django-template</li> </ul> </li> <li>FastAPI<ul> <li>https://github.com/fastapi/full-stack-fastapi-template</li> </ul> </li> <li>Flask<ul> <li>https://github.com/cookiecutter-flask/cookiecutter-flask</li> <li>https://github.com/karec/cookiecutter-flask-restful</li> <li>https://github.com/italomaia/flask-empty</li> </ul> </li> </ul>"},{"location":"guides/pre-commit/","title":"pre-commit User Guides on this repository","text":"<p>Tip</p> <p>Official documentation for pre-commit is available at https://pre-commit.com</p> <p>Note</p> <p>If you do not want to use the pre-commit hook, run this command: <pre><code>uv run pre-commit uninstall\n</code></pre></p>"},{"location":"guides/pre-commit/#pre-commit-configurations","title":"pre-commit Configurations","text":"<p>If you want to configure the pre-commit, visit the Configuration for pre-commit page.</p>"},{"location":"guides/pyright/","title":"Pyright User Guides on this repository","text":"<p>Tip</p> <p>Official documentation for Pyright is available at https://microsoft.github.io/pyright</p>"},{"location":"guides/pyright/#how-to-use-pyright","title":"How to use Pyright","text":"<p>If you want to run Pyright to manually check types in your Python code, run the following command: <pre><code>uv run pyright\n</code></pre></p>"},{"location":"guides/pyright/#pyright-configurations","title":"Pyright Configurations","text":"<p>If you want to configure the Pyright, visit the Configuration for Pyright page.</p>"},{"location":"guides/ruff/","title":"Ruff User Guides","text":"<p>Tip</p> <p>Official documentation for Ruff is available at https://docs.astral.sh/ruff</p>"},{"location":"guides/ruff/#format-python-code-with-ruff","title":"Format Python Code with Ruff","text":"<p>If you want to format your Python code in Ruff, run the following command or press Cmd+S to save it: <pre><code>uv run ruff format\n</code></pre></p>"},{"location":"guides/ruff/#lint-python-code-with-ruff","title":"Lint Python Code with Ruff","text":"<pre><code>uv run ruff check\n</code></pre>"},{"location":"guides/ruff/#configuration-for-ruff","title":"Configuration for Ruff","text":"<p>If you want to configure the Ruff, visit the Configuration for ruff page.</p>"},{"location":"guides/test/","title":"Test User Guides on this repository","text":"<p>Tip</p> <p>Official documentation for pytest is available at https://docs.pytest.org/en/stable</p>"},{"location":"guides/test/#run-pytest-command","title":"Run pytest command","text":"<pre><code>uv run pytest\n</code></pre> <pre><code>============================================= test session starts =============================================\nplatform linux -- Python 3.12.6, pytest-8.3.4, pluggy-1.5.0\nrootdir: /workspaces/python-uv\nconfigfile: pytest.ini\ntestpaths: tests\nplugins: cov-6.0.0\ncollected 4 items\n\ntests/tools/test__logger.py ....                                                                        [100%]\n\n---------- coverage: platform linux, python 3.12.6-final-0 -----------\nName                          Stmts   Miss Branch BrPart  Cover   Missing\n-------------------------------------------------------------------------\ntests/tools/test__logger.py      24      0      0      0   100%\ntools/__init__.py                 2      0      0      0   100%\ntools/logger/__init__.py          5      0      0      0   100%\ntools/logger/color.py            12      0      0      0   100%\ntools/logger/googlecloud.py      10      0      0      0   100%\ntools/logger/local.py            12      0      0      0   100%\ntools/logger/logger.py           23      0      2      0   100%\ntools/logger/style.py             7      0      0      0   100%\ntools/logger/type.py              5      0      0      0   100%\n-------------------------------------------------------------------------\nTOTAL                           100      0      2      0   100%\nCoverage HTML written to dir htmlcov\n\nRequired test coverage of 75% reached. Total coverage: 100.00%\n\n============================================== 4 passed in 2.00s ==============================================\n</code></pre>"},{"location":"guides/test/#run-pytest-on-vs-code","title":"Run pytest on VS Code","text":"<p>Test with coverage on VS Code</p> <p></p> <p>Code coverage on editor</p>"},{"location":"guides/test/#configuration-for-test","title":"Configuration for Test","text":"<p>If you want to configure the Test hook, visit the Configuration for Test page.</p>"},{"location":"guides/uv/","title":"uv User Guides on this repository","text":"<p>Tip</p> <p>Official documentation for uv is available at https://docs.astral.sh/uv</p>"},{"location":"guides/uv/#add-python-libraries","title":"Add Python Libraries","text":"<p>If you want to install Python libraries, run the following command: <pre><code>uv add ruff\n</code></pre></p> <p>Note</p> <p>If you want to install a specific version of a Python library, run the following command: <pre><code>uv add \"ruff==0.8.3\"\n</code></pre></p> <p>Note</p> <p>If you want to install only in dev, run the following command: <pre><code>uv add --dev ruff\n</code></pre></p>"},{"location":"guides/uv/#remove-python-libraries","title":"Remove Python Libraries","text":"<pre><code>uv remove ruff\n</code></pre>"},{"location":"guides/uv/#pin-python-version","title":"Pin Python Version","text":"<p>If you want to pin the Python version, run the following command: <pre><code>uv pin python 3.14\n</code></pre></p>"},{"location":"guides/uv/#configuration-for-uv","title":"Configuration for uv","text":"<p>If you want to configure the uv, visit the Configuration for uv page.</p>"},{"location":"guides/tools/","title":"Using Tools","text":"<p>How to use tools in this repository.</p> <ul> <li>How to use config</li> <li>How to use logger</li> </ul>"},{"location":"guides/tools/config/","title":"config","text":""},{"location":"guides/tools/config/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>.env</code><ul> <li>Use this file when you want to set environment variables for the project.</li> </ul> </li> <li><code>.env.local</code><ul> <li>Use this file when you want to set environment variables for the local environment.</li> </ul> </li> </ul> <p>Addendum environment variables to <code>tools/config/settings.py</code>: tools/config/settings.py<pre><code>class Settings(BaseSettings):\n    \"\"\"Environment variables settings.\n\n    Examples:\n        &gt;&gt;&gt; from tools.config import Settings\n        &gt;&gt;&gt; from tools.logger import Logger, LogType\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; settings = Settings()\n        &gt;&gt;&gt; logger = Logger(\n        &gt;&gt;&gt;     name=__name__,\n        &gt;&gt;&gt;     log_type=LogType.LOCAL if settings.IS_LOCAL else LogType.GOOGLE_CLOUD\n        &gt;&gt;&gt; )\n\n    \"\"\"\n\n    model_config = SettingsConfigDict(\n        env_file=(\".env\", \".env.local\"),\n        env_file_encoding=\"utf-8\",\n    )\n\n    DEBUG: bool = False\n    IS_LOCAL: bool = False\n</code></pre></p>"},{"location":"guides/tools/config/#fastapi","title":"FastAPI","text":"<pre><code>from fastapi import FastAPI\n\nfrom tools.config import Settings\n\n\nsettings = Settings()\napp = FastAPI(**settings.fastapi_kwargs)\n</code></pre>"},{"location":"guides/tools/logger/","title":"logger","text":"<pre><code>from tools import Logger\n\n\ndef main() -&gt; None:\n    \"\"\"Sample function.\"\"\"\n    logger = Logger(__name__)\n    logger.info(\"Hello, World!\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Note</p> <pre><code>2038-01-19 03:14:07,000 | INFO     | __main__:main:7 - Hello, World!\n</code></pre>"},{"location":"guides/tools/tracer/","title":"trace","text":""},{"location":"guides/tools/tracer/#timer","title":"Timer","text":""},{"location":"guides/tools/tracer/#decorator","title":"Decorator","text":"<pre><code>import time\n\nfrom tools.tracer import Timer\n\n\n@Timer(\"sleep\")\ndef sleep(t: int = 1) -&gt; None:\n    time.sleep(t)\n\n\nsleep(1)\n</code></pre> <p>Note</p> <pre><code>2038-01-19 03:14:07,000 | DEBUG    | sleep:__exit__:50 - executed in 1000.000000 ms\n</code></pre>"},{"location":"guides/tools/tracer/#contextmanager","title":"ContextManager","text":"<pre><code>import time\n\nfrom tools.tracer import Timer\n\nwith Timer(\"examples\"):\n    time.sleep(1)\n</code></pre> <p>Note</p> <pre><code>2038-01-19 03:14:07,000 | DEBUG    | examples:__exit__:50 - executed in 1000.000000 ms\n</code></pre>"},{"location":"usecases/","title":"Usecases","text":"<ul> <li>Jupyter Notebooks</li> <li>FastAPI</li> <li>OpenCV</li> </ul>"},{"location":"usecases/fastapi/","title":"FastAPI","text":""},{"location":"usecases/fastapi/#uv-command","title":"uv command","text":"<pre><code>uv add fastapi\n</code></pre>"},{"location":"usecases/fastapi/#pyprojecttoml","title":"pyproject.toml","text":"pyproject.toml<pre><code>[project]\ndependencies = [\n    \"fastapi&gt;=0.115.6\",\n]\n</code></pre>"},{"location":"usecases/jupyter/","title":"JupyterNotebook","text":"<p>This repository provides jupyter branch for Jupyter Notebook. What a surprise! You can use it with just the following commands! <pre><code>git switch jupyter\n</code></pre></p>"},{"location":"usecases/jupyter/#devcontainerjson","title":"devcontainer.json","text":".devcontainer/devcontainer.json<pre><code>{\n    \"name\": \"uv\",\n    \"build\": {\n        \"context\": \"..\",\n        \"dockerfile\": \"Dockerfile\",\n        \"args\": {\n            \"UV_VERSION\": \"0.5.11\",\n            \"DEBIAN_VERSION\": \"bookworm\"\n        }\n    },\n    \"features\": {\n        \"ghcr.io/dhoeric/features/hadolint:1\": {}\n    },\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"charliermarsh.ruff\",\n                \"exiasr.hadolint\",\n                \"kevinrose.vsc-python-indent\",\n                \"mosapride.zenkaku\",\n                \"ms-azuretools.vscode-docker\",\n                \"ms-python.python\",\n                \"ms-toolsai.jupyter\",\n                \"njpwerner.autodocstring\",\n                \"redhat.vscode-yaml\",\n                \"shardulm94.trailing-spaces\",\n                \"tamasfe.even-better-toml\"\n            ]\n        }\n    },\n    \"containerEnv\": {\n        \"DISPLAY\": \"dummy\",\n        \"PYTHONUNBUFFERED\": \"True\",\n        \"UV_LINK_MODE\": \"copy\",\n        \"UV_PROJECT_ENVIRONMENT\": \"/home/vscode/.venv\"\n    },\n    \"postCreateCommand\": \"uv sync --frozen\",\n    \"postStartCommand\": \"uv run pre-commit install\",\n    \"remoteUser\": \"vscode\"\n}\n</code></pre>"},{"location":"usecases/jupyter/#settingsjson","title":"settings.json","text":".vscode/settings.json<pre><code>{\n    \"notebook.codeActionsOnSave\": {\n        \"notebook.source.fixAll\": \"explicit\",\n        \"notebook.source.organizeImports\": \"explicit\"\n    },\n    \"notebook.formatOnSave.enabled\": true,\n    \"python.defaultInterpreterPath\": \"/home/vscode/.venv/bin/python\",\n    \"[python]\": {\n        \"editor.codeActionsOnSave\": {\n            \"source.fixAll\": \"explicit\",\n            \"source.organizeImports\": \"explicit\"\n        },\n        \"editor.defaultFormatter\": \"charliermarsh.ruff\",\n        \"editor.formatOnSave\": true,\n        \"editor.tabSize\": 4\n    }\n}\n</code></pre>"},{"location":"usecases/opencv/","title":"OpenCV","text":""},{"location":"usecases/opencv/#dockerfile","title":"Dockerfile","text":".devcontainer/Dockerfile<pre><code>ARG UV_VERSION=0.5.11\nARG DEBIAN_VERSION=bookworm\n\n\nFROM ghcr.io/astral-sh/uv:$UV_VERSION AS uv\n\n\nFROM mcr.microsoft.com/vscode/devcontainers/base:$DEBIAN_VERSION\nLABEL maintainer=\"a5chin &lt;a5chin.origin+contact@gmain.com&gt;\"\n\n# hadolint ignore=DL3008\nRUN apt-get update \\\n    &amp;&amp; apt-get install -y --no-install-recommends \\\n    # For OpenCV etc...\n    libgl1 libglib2.0-0 \\\n    # To remove the image size, it is recommended refresh the package cache as follows\n    &amp;&amp; apt-get clean \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nCOPY --from=uv --chown=vscode: /uv /uvx /bin/\n</code></pre>"},{"location":"usecases/opencv/#uv-command","title":"uv command","text":"<pre><code>uv add opencv-python\n</code></pre>"},{"location":"usecases/opencv/#pyprojecttoml","title":"pyproject.toml","text":"pyproject.toml<pre><code>[project]\ndependencies = [\n    \"opencv-python&gt;=4.10.0.84\",\n]\n</code></pre>"}]}